name: Build Nest.js backend and deploy to AWS ECR
on:
  push:
    branches:
      - dev

jobs:
  test-and-alert:
    runs-on: ubuntu-latest
    env:
      SENDER_EMAIL : ${{ vars.SENDER_EMAIL }}
      RECIPIENT_EMAIL : ${{ vars.RECIPIENT_EMAIL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm ci

    - name: Test the app
      run: npm run test 

    - name: Send email on test failure
      if: failure()
      uses: dawidd6/action-send-mail@v2.2.0
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Test failed on ${{ github.repository }}'
        body: 'The test suite failed for ${{ github.repository }}'
        to: ${{ env.RECIPIENT_EMAIL }}
        from: ${{ env.SENDER_EMAIL }}

  build-and-deploy:
    needs: test-and-alert
    if: ${{ success() }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_REGISTRY : ${{ secrets.ECS_REGISTRY }}
      CLUSTER_NAME : ${{ vars.CLUSTER_NAME }}
      SERVICE_NAME : ${{ vars.SERVICE_NAME }}
      TASK_DEFINITION: ${{ vars.TASK_DEFINITION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build docker image
      env: 
        JWT_ACTIVIATE_SECRET_KEY : ${{ secrets.JWT_ACTIVIATE_SECRET_KEY }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        MONGO_URL: ${{ secrets.MONGO_URL }}
        EMAIL_CONFIRMATION_URL: ${{ secrets.EMAIL_CONFIRMATION_URL }}
        SALT: ${{ secrets.SALT }}
        DOMAIN: ${{ secrets.DOMAIN }}
        MAILGUN_APIKEY: ${{ secrets.MAILGUN_APIKEY }}
        EXPIRE: ${{ secrets.EXPIRE }}
        EMAIL_SEND: ${{ secrets.EMAIL_SEND }}
        ACCESS_TOKEN_SECRET_PRIVATE: ${{ secrets.ACCESS_TOKEN_SECRET_PRIVATE }}
        ACCESS_TOKEN_SECRET_PUBLIC: ${{ secrets.ACCESS_TOKEN_SECRET_PUBLIC }}
        REFRESH_TOKEN_SECRET_PRIVATE: ${{ secrets.REFRESH_TOKEN_SECRET_PRIVATE }}
        REFRESH_TOKEN_SECRET_PUBLIC: ${{ secrets.REFRESH_TOKEN_SECRET_PUBLIC }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_EMAIL_PASSWORD: ${{ secrets.SENDER_EMAIL_PASSWORD }}
        MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
        MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
        
      # Use --build-arg option to pass in the values for the build-time variables. 
      run: |
        docker build \
        --build-arg JWT_ACTIVIATE_SECRET_KEY="$JWT_ACTIVIATE_SECRET_KEY" \
        --build-arg MAILGUN_APIKEY="$MAILGUN_APIKEY" \
        --build-arg SERVER_PORT="$SERVER_PORT" \
        --build-arg MONGO_URL="$MONGO_URL" \
        --build-arg EMAIL_CONFIRMATION_URL="$EMAIL_CONFIRMATION_URL" \
        --build-arg SALT="$SALT" \
        --build-arg DOMAIN="$DOMAIN" \
        --build-arg EXPIRE="$EXPIRE" \
        --build-arg MAILGUN_DOMAIN="$MAILGUN_DOMAIN" \
        --build-arg MAILGUN_API_KEY="$MAILGUN_API_KEY" \
        --build-arg SENDER_EMAIL_PASSWORD="$SENDER_EMAIL_PASSWORD" \
        --build-arg SENDER_EMAIL="$SENDER_EMAIL" \
        --build-arg JWT_SECRET_KEY="$JWT_SECRET_KEY" \
        --build-arg REFRESH_TOKEN_SECRET_PUBLIC="$REFRESH_TOKEN_SECRET_PUBLIC" \
        --build-arg REFRESH_TOKEN_SECRET_PRIVATE="$REFRESH_TOKEN_SECRET_PRIVATE" \
        --build-arg ACCESS_TOKEN_SECRET_PUBLIC="$ACCESS_TOKEN_SECRET_PUBLIC" \
        --build-arg ACCESS_TOKEN_SECRET_PRIVATE="$ACCESS_TOKEN_SECRET_PRIVATE" \
        --build-arg EMAIL_SEND="$EMAIL_SEND" \
        -t ${{ env.ECS_REGISTRY }}/fotopie:latest \
        -t ${{ env.ECS_REGISTRY }}/fotopie:${{ github.sha }} .
    - name: Push docker image to AWS ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION}} | docker login --username AWS --password-stdin ${{ env.ECS_REGISTRY }}
        docker push ${{ env.ECS_REGISTRY }}/fotopie
        docker push ${{ env.ECS_REGISTRY }}/fotopie:${{ github.sha }}
    - name: Update ECS service
      run: |
          aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --task-definition $TASK_DEFINITION \
          --force-new-deployment
